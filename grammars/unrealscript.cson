scopeName: 'source.uc'
fileTypes: [
  'uc'
]
firstLineMatch: '(?i)-\\*-[^*]*(Mode:\\s*)?C\\+\\+(\\s*;.*?)?\\s*-\\*-'
name: 'UnrealScript'

patterns: [
  {
    include: 'source.c#comments'
  }
  {
    include: '#constants'
  }
  {
    match: '(?i)\\bdefault\\b'
    name: 'variable.other.member.c'
  }
  {
    # e.g. class'Pawn'.default.Health = 100;
    match: '(?i)\\.(default|static)\\.'
    captures:
      1: name: 'variable.other.member.c'
  }
  {
    match: '^#.*$'
    captures:
      0: name: 'entity.name.function.preprocessor.c'
  }
  {
    match: '(?i)\\bdefaultproperties\\b'
    name:  'keyword.control.cpp'
  }
  {
    match: '(?i)\\b(replication|reliable|unreliable)\\b'
    name: 'keyword.control.cpp'
  }
  {
    # class declaration
    begin: '''(?ix)
      ^[\\ \\t]*
      (class)\\s+([_A-Za-z][_A-Za-z0-9]*)\\s+
      (extends)\\s+([_A-Za-z][_A-Za-z0-9]*)
    '''
    beginCaptures:
      1: name: 'storage.type.cpp'
      2: name: 'entity.name.type.cpp'
      3: name: 'storage.type.modifier.cpp'
      4: name: 'entity.name.type.inherited.cpp'
    end: ';'
    patterns: [
      {
        include: 'source.c#comments'
      }
      {
        match: '''(?ix)
            \\b(nativereplication|native|guid|transient|placeable|notplaceable|noexport
            |exportstructs|cacheexempt|hidedropdown|collapsecategories|editinlinenew|instanced|dependson
            |hidecategories|showcategories
            )\\b
        '''
        name: 'storage.type.modifier.cpp'
      }
      {
        match: '(?ix)\\bconfig\\b'
        name: 'entity.name.function.cpp'
      }
      {
        match: '(?ix)\\babstract\\b'
        name: 'variable.language.this.cpp'
      }
      {
        match: '(?ix)\\b(within)\\s+([_A-Za-z][_A-Za-z0-9]*)\\b'
        captures:
          1: name: 'storage.type.modifier.cpp'
          2: name: 'entity.name.type.inherited.cpp'
      }
      {
        match: '\\((.*?)\\)'
        captures:
          1: name: 'entity.name.type.cpp'
      }
    ]
  }
  {
    # global variables
    match: '''(?ix)
      ^[\\ \\t]*
      (var)(?:\\((.*)\\))?
      ((?:\\s+(?:config|globalconfig|const|editconst|editconstarray|edfindable|editinline|input|transient|native|private|protected|travel|skip|export|localized|deprecated))*)
      \\s+([_A-Za-z][_A-Za-z0-9]*)
      \\s*(?:<\\s*(?:([_A-Za-z][_A-Za-z0-9]*)|(class)\\s*<\\s*([_A-Za-z][_A-Za-z0-9]*)\\s*>)\\s*>)?
    '''
    captures:
      1: name: 'storage.type.cpp'
      2: name: 'entity.name.type.cpp'
      3: name: 'storage.type.modifier.cpp'
      4: name: 'entity.name.type.cpp'
      5: name: 'entity.name.type.cpp'
      6: name: 'storage.type.modifier.cpp'
      7: name: 'entity.name.type.cpp'
  }
  {
    match: '''(?ix)
      ^[\\ \\t]*
      (struct|enum)\\s+([_A-Za-z][_A-Za-z0-9]*)
    '''
    captures:
      1: name: 'storage.type.cpp'
      2: name: 'entity.name.type.cpp'
  }
  {
    # states
    match: '''(?ix)
      ^[\\ \\t]*
      (?:(auto)\\s+)?(state)(?:\\s*\\((.*?)\\))?
      \\s+([_A-Za-z][_A-Za-z0-9]*)
      (?:\\s+(extends)\\s+([_A-Za-z][_A-Za-z0-9]*))?
    '''
    captures:
      1: name: 'storage.type.modifier.cpp'
      2: name: 'storage.type.cpp'
      3: name: 'entity.name.type.cpp'
      4: name: 'entity.name.type.cpp'
      5: name: 'storage.type.modifier.cpp'
      6: name: 'entity.name.type.cpp'
  }
  {
    # state labels:
    match: '^([_A-Za-z][_A-Za-z0-9]*):'
    captures:
      1: name: 'string.quoted.single.c'  # to color labels same as in goto statements
  }
  {
    match: '(?i)\\b(self|super|global)\\b'
    name: 'variable.language.this.cpp'
  }
  {
    match: '(?i)\\b(exec|function|event|operator|iterator|static|final|simulated|protected|private|latent|native)\\b'
    name: 'keyword.control.c'
  }
  {
    match: '(?i)\\b(length)\\b'
    name: 'keyword.control.c'
  }
  {
    match: '(?i)\\b(optional|out|coerce)\\b'
    name: 'storage.type.modifier.cpp'
  }
  {
    include: '#operators'
  }
  {
    include: '#storage_types'
  }
  {
    include: '#block'
  }
  {
    include: 'source.c'
  }
]

repository:
  'constants':
    patterns: [
      {
        match: '(?i)\\bnone\\b'
        name: 'constant.language.cpp'
      }
      {
        match: '(?i)\\b(DP_UpperLeft|DP_UpperMiddle|DP_UpperRight|DP_MiddleRight|DP_LowerRight|DP_LowerMiddle|DP_LowerLeft|DP_MiddleLeft|DP_MiddleMiddle)\\b'
        name: 'constant.language.cpp'
      }
      {
        match: '(?i)\\b(DM_Low|DM_High|DM_SuperHigh)\\b'
        name: 'constant.language.cpp'
      }
      {
        match: '(?i)\\b(DT_None|DT_Sprite|DT_Mesh|DT_Brush|DT_RopeSprite|DT_VerticalSprite|DT_Terraform|DT_SpriteAnimOnce|DT_StaticMesh|DT_DrawType|DT_Particle|DT_AntiPortal|DT_FluidSurface)\\b'
        name: 'constant.language.cpp'
      }
      {
        match: '(?i)\\b(PHYS_None|PHYS_Walking|PHYS_Falling|PHYS_Swimming|PHYS_Flying|PHYS_Rotating|PHYS_Projectile|PHYS_Interpolating|PHYS_MovingBrush|PHYS_Spider|PHYS_Trailer|PHYS_Ladder|PHYS_RootMotion|PHYS_Karma|PHYS_KarmaRagDoll|PHYS_Hovering|PHYS_CinMotion)\\b'
        name: 'constant.language.cpp'
      }
      {
        match: '(?i)\\b(ROLE_None|ROLE_DumbProxy|ROLE_SimulatedProxy|ROLE_AutonomousProxy|ROLE_Authority)\\b'
        name: 'constant.language.cpp'
      }
      {
        match: '(?i)\\b(NM_Standalone|NM_DedicatedServer|NM_ListenServer|NM_Client)\\b'
        name: 'constant.language.cpp'
      }
      {
        match: '(?i)\\b(STY_None|STY_Normal|STY_Masked|STY_Translucent|STY_Modulated|STY_Alpha|STY_Additive|STY_Subtractive|STY_Particle|STY_AlphaZ)\\b'
        name: 'constant.language.cpp'
      }
      {
        match: '(?i)\\b(SLOT_None|SLOT_Misc|SLOT_Pain|SLOT_Interact|SLOT_Ambient|SLOT_Talk|SLOT_Interface)\\b'
        name: 'constant.language.cpp'
      }
      {
        match: '(?i)\\b(LT_None|LT_Steady|LT_Pulse|LT_Blink|LT_Flicker|LT_Strobe|LT_BackdropLight|LT_SubtlePulse|LT_TexturePaletteOnce|LT_TexturePaletteLoop|LT_FadeOut)\\b'
        name: 'constant.language.cpp'
      }
      {
        match: '(?i)\\b(LE_None|LE_TorchWaver|LE_FireWaver|LE_WateryShimmer|LE_Searchlight|LE_SlowWave|LE_FastWave|LE_CloudCast|LE_StaticSpot|LE_Shock|LE_Disco|LE_Warp|LE_Spotlight|LE_NonIncidence|LE_Shell|LE_OmniBumpMap|LE_Interference|LE_Cylinder|LE_Rotor|LE_Negative|LE_Sunlight|LE_QuadraticNonIncidence)\\b'
        name: 'constant.language.cpp'
      }
    ]
  'storage_types':
    patterns: [
      {
        match: '(?i)\\b(bool|byte|int|float|string|array|class|name)\\b'
        name: 'storage.type.c'
      }
      {
        match: '(?i)\\b(vector|rotator|plane|coords|quat)\\b'
        name: 'entity.name.type.cpp'
      }
    ]
  'block':
    patterns: [
      {
        begin: '{'
        beginCaptures:
          0: name: 'punctuation.section.block.begin.bracket.curly.c'
        end: '}'
        endCaptures:
          0:name: 'punctuation.section.block.end.bracket.curly.c'
        name: 'meta.block.c'
        patterns: [
          {
            # local variables
            match: '''(?ix)
              ^[\\ \\t]*
              (local)
              \\s+([_A-Za-z][_A-Za-z0-9]*)
              \\s*(?:<\\s*(?:([_A-Za-z][_A-Za-z0-9]*)|(class)\\s*<\\s*([_A-Za-z][_A-Za-z0-9]*)\\s*>)\\s*>)?
            '''
            captures:
              1: name: 'storage.modifier.cpp'
              2: name: 'entity.name.type.cpp'
              3: name: 'entity.name.type.cpp'
              4: name: 'storage.type.modifier.cpp'
              5: name: 'entity.name.type.cpp'
          }
          {
            include: '$base'
          }
        ]
      }
    ]
  'operators':
    patterns: [

      {
        match: '--'
        name: 'keyword.control.c'
      }
      {
        match: '\\+\\+'
        name: 'keyword.control.c'
      }
      {
        match: '\\&=|@=|%=|\\+=|-=|\\*=|(?<!\\()/='
        name: 'keyword.control.c'
      }
      {
        match: '&=|\\^=|<<=|>>=|\\|='
        name: 'keyword.control.c'
      }
      {
        match: '<<|>>|>>>'
        name: 'keyword.control.c'
      }
      {
        match: '!=|<=|>=|==|~=|<|>'
        name: 'keyword.control.c'
      }
      {
        match: '&&|!|\\|\\|'
        name: 'keyword.control.c'
      }
      {
        match: '&|\\||\\^|~'
        name: 'keyword.control.c'
      }
      {
        match: '='
        name: 'keyword.control.c'
      }
      {
        match: '\\$|@|%|\\*|/|-|\\+|\\*\\*'
        name: 'keyword.control.c'
      }
      {
        match: '(?i)\\b(dot|cross|clockwisefrom)\\b'
        name: 'keyword.control.c'
      }
    ]
